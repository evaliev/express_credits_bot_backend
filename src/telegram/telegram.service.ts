import { Injectable } from '@nestjs/common';
import { InjectBot } from 'nestjs-telegraf';
import { Context, Telegraf } from 'telegraf';
import { successRequestButtons } from './telegram.buttons';

@Injectable()
export class TelegramService {
  constructor() {}
  getHello(): string {
    return 'Hello World!';
  }

  async runTimer(ctx: Context) {
    const userData = 'afdsdfsdjfhskjfhsdkjfghsjkdfh';
    // const img = QRCode.toDataURL(userData);
    ctx.sendMessage(
      '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç–∫—Å–ø—Ä–µ—Å—Å –∫—Ä–µ–¥–∏—Ç. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç!',
    );
    await setTimeout(async () => {
      console.log('Delayed for 10 second.');

      await ctx.sendPhoto(
        { source: './qr-code.png' },
        {
          caption:
            '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!ü•≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫—Ä–µ–¥–∏—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞ –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É ',
        },
      );
    }, 5000);
  }
}
