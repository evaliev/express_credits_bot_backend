import { Injectable } from '@nestjs/common';
import { SchedulerRegistry } from '@nestjs/schedule/dist';
import { InjectBot } from 'nestjs-telegraf';
import { toBuffer } from 'qrcode';
import { Readable } from 'stream';
import { Context, Telegraf } from 'telegraf';
import { QrCodeData } from './telegram.dto';

@Injectable()
export class TelegramService {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private schedulerRegistry: SchedulerRegistry,
  ) {}

  async submitApplication(chatId: string, qrCodeData: QrCodeData) {
    await this.bot.telegram.sendMessage(
      chatId,
      '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç–∫—Å–ø—Ä–µ—Å—Å –∫—Ä–µ–¥–∏—Ç. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç!',
    );

    this.schedulerRegistry.addTimeout(
      `qr_generation_${chatId}_${Date.now()}`,
      setTimeout(() => {
        toBuffer(qrCodeData.applicationId, async (_, code) => {
          await this.bot.telegram.sendPhoto(chatId, {
            source: Readable.from(code),
          });

          await this.bot.telegram.sendMessage(
            chatId,
            '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!ü•≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –∫—Ä–µ–¥–∏—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –±–∞–Ω–∫–∞ –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ—Ç QR –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É',
          );
        });
      }, 2 * 60_000),
    );
  }
}
